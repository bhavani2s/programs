<?php
session_start();

if (!isset($_SESSION['student_logged_in']) || $_SESSION['student_logged_in'] !== true) {
    header("Location: student_login.php");
    exit;
}

$student_id = $_SESSION['student_id'];
$student_name = $_SESSION['student_name'];

// Fetch assignment details including due date and time
$assignmentId = isset($_GET['assignment_id']) ? $_GET['assignment_id'] : (isset($_SESSION['assignmentId']) ? $_SESSION['assignmentId'] : 0);
$_SESSION['assignmentId'] = $assignmentId; //store assignment id

// Assuming you have a database connection
$conn = mysqli_connect("localhost", "root", "", "sai");
if (!$conn) {
    die("Connection failed: " . mysqli_connect_error());
}

$sql = "SELECT deadline FROM assignments WHERE assignment_id = $assignmentId";
$result = mysqli_query($conn, $sql);

if ($result && mysqli_num_rows($result) > 0) {
    $row = mysqli_fetch_assoc($result);
    $deadline = $row['deadline'];
    $deadlineTimestamp = strtotime($deadline);
    $now = time();
    $isDeadlinePassed = ($now > $deadlineTimestamp);
} else {
    $isDeadlinePassed = true; // Default to true to prevent submission if assignment details are not found.
    echo "Error: Could not retrieve assignment details or assignment does not exist.";
}
mysqli_close($conn);
?>

<!DOCTYPE html>
<html>
<head>
    <title>Write Assignment</title>
    <style>
        body {
            overflow-y: scroll;
            margin: 0;
            padding: 0;
        }

        .editor-container {
            display: flex;
            flex-direction: column;
            width: 80%;
            margin: 20px auto;
            border: 1px solid #ccc;
            padding: 10px;
            border-radius: 5px;
            position: relative;
        }

        .menu-bar {
            display: flex;
            margin-bottom: 10px;
            gap: 10px;
        }

        .menu-bar button {
            padding: 8px 15px;
            border: none;
            background-color: #eee;
            cursor: pointer;
            border-radius: 3px;
            font-size: 14px;
        }

        .menu-bar button:hover {
            background-color: #ddd;
        }

        .toolbar {
            display: none; /* Initially hidden */
            margin-bottom: 10px;
            gap: 5px;
        }

        .toolbar button {
            padding: 8px 15px;
            border: none;
            background-color: #eee;
            cursor: pointer;
            border-radius: 3px;
            font-size: 14px;
        }

        .toolbar button:hover {
            background-color: #ddd;
        }

        .dropdown {
            position: relative;
            display: inline-block;
        }

        .dropdown-content {
            display: none;
            position: absolute;
            background-color: #f9f9f9;
            min-width: 180px;
            max-height: 200px;
            overflow-y: auto; /* Enable vertical scrolling */
            box-shadow: 0px 8px 16px 0px rgba(0,0,0,0.2);
            z-index: 1;
            border-radius: 3px;
            border: 1px solid #ccc;
        }

        .dropdown-content a {
            color: black;
            padding: 12px 16px;
            text-decoration: none;
            display: block;
            font-size: 14px;
        }

        .dropdown-content a:hover {
            background-color: #ddd;
        }

        .dropdown:hover .dropdown-content {
            display: block;
        }

        .text-editor {
            flex: 1;
            border: 1px solid #ddd;
            padding: 10px;
            overflow-y: auto;
            resize: none;
            min-height: 200px;
            border-radius: 5px;
            font-size: 16px;
            line-height: 1.5;
            position: relative; /* For positioning delete button */
        }

        #next-button {
            margin-top: 20px;
            padding: 10px 20px;
            background-color: #007bff;
            color: white;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            font-size: 18px;
            align-self: center;
            width: 200px;
        }

        #next-button:hover {
            background-color: #0056b3;
        }

        .error-message {
            color: red;
            text-align: center;
            font-size: 18px;
            margin-top: 20px;
        }

        .modal {
            display: none; /* Hidden by default */
            position: fixed; /* Stay in place */
            z-index: 1; /* Sit on top */
            left: 0;
            top: 0;
            width: 100%; /* Full width */
            height: 100%; /* Full height */
            overflow: auto; /* Enable scroll if needed */
            background-color: rgba(0,0,0,0.4); /* Black w/ opacity */
        }

        .modal-content {
            background-color: #fefefe;
            margin: 15% auto; /* 15% from the top and centered */
            padding: 20px;
            border: 1px solid #888;
            width: 30%; /* Could be more or less, depending on screen size */
            border-radius: 5px;
        }

        .modal-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 10px;
        }

        .close-button {
            color: #aaa;
            float: right;
            font-size: 28px;
            font-weight: bold;
        }

        .close-button:hover,
        .close-button:focus {
            color: black;
            text-decoration: none;
            cursor: pointer;
        }

        .modal-body label {
            display: block;
            margin-bottom: 5px;
            font-size: 16px;
        }

        .modal-body input[type=number] {
            width: 80px;
            padding: 8px;
            margin-bottom: 10px;
            border: 1px solid #ccc;
            border-radius: 3px;
            font-size: 16px;
        }

        .modal-footer {
            text-align: right;
        }

        .modal-footer button {
            padding: 10px 20px;
            background-color: #007bff;
            color: white;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            font-size: 16px;
        }

        .modal-footer button:hover {
            background-color: #0056b3;
        }

        .table-controls {
            position: absolute;
            top: -30px; /* Adjust as needed */
            left: 10px;
        }

        .delete-table-button {
            background: none;
            border: none;
            color: red;
            font-size: 20px;
            cursor: pointer;
            padding: 0;
            margin-left: 10px;
            line-height: 1;
        }

        .delete-table-button:hover {
            color: darkred;
        }

        .custom-table {
            width: 100%;
            border-collapse: collapse;
            border: 1px solid black;
            margin-bottom: 10px;
            table-layout: fixed; /* Prevent content from overflowing */
        }

        .custom-table td, .custom-table th {
            border: 1px solid black;
            padding: 8px;
            word-break: break-word; /* Break long words */
        }
        .modal-body label {
            display: inline-block; /* Display labels inline with inputs */
            width: 60px; /* Adjust width as needed */
            margin-right: 10px;
            font-size: 14px;
        }

        .modal-body input[type=number] {
            width: 50px; /* Make input fields smaller */
            padding: 5px;
            margin-bottom: 10px;
            border: 1px solid #ccc;
            border-radius: 3px;
            font-size: 14px;
        }

        .modal-content {
            background-color: #fefefe;
            margin: 15% auto;
            padding: 20px;
            border: 1px solid #888;
            width: 300px; /* Set a fixed width for the modal */
            border-radius: 5px;
        }

        .modal-header h2 {
            font-size: 18px; /* Smaller heading */
            margin-bottom: 5px;
        }

        .modal-footer button {
            padding: 8px 15px; /* Smaller button */
            background-color: #007bff;
            color: white;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            font-size: 14px;
        }
        .editor-container {
    display: flex;
    flex-direction: column;
    width: 80%;
    margin: 20px auto;
    border: 1px solid #ccc;
    padding: 10px;
    border-radius: 5px;
    position: relative;
    max-height: 80vh; /* Or any other suitable maximum height */
}

.text-editor {
    flex: 1; /* Allows it to grow and take available vertical space */
    border: 1px solid #ddd;
    padding: 10px;
    overflow-y: scroll; /* Always show the vertical scrollbar */
    resize: none;
    min-height: 200px;
    border-radius: 5px;
    font-size: 16px;
    line-height: 1.5;
    position: relative; /* For positioning delete button */
}
#write-menu {
      position: relative;
    }

    #pen-dropdown-content {
      display: none;
      position: absolute;
      background-color: #f9f9f9;
      min-width: 100px;
      box-shadow: 0px 8px 16px 0px rgba(0,0,0,0.2);
      z-index: 1;
      border-radius: 3px;
      border: 1px solid #ccc;
    }

    #pen-dropdown-content a {
      color: black;
      padding: 8px 12px;
      text-decoration: none;
      display: block;
      font-size: 14px;
      text-align: center;
    }

    #pen-dropdown-content a:hover {
      background-color: #ddd;
    }

    #write-menu:hover #pen-dropdown-content {
      display: block;
    }

    #drawing-overlay {
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      pointer-events: none; 
    }


/* Optional: Style the scrollbar (for Chrome, Safari, Edge) */
.text-editor::-webkit-scrollbar {
    width: 8px; /* Adjust width as needed */
}

.text-editor::-webkit-scrollbar-track {
    background: #f1f1f1; /* Scrollbar track color */
    border-radius: 4px;
}

.text-editor::-webkit-scrollbar-thumb {
    background: #888; /* Scrollbar handle color */
    border-radius: 4px;
}

/* Optional: Style the scrollbar (for Firefox) */
.text-editor {
    scrollbar-width: thin; /* other values: auto, none */
    scrollbar-color: #888 #f1f1f1; /* thumb and track color */
}
        

    </style>
</head>
<body>
    <div class="editor-container">
        <div class="menu-bar">
            <button onclick="showToolbar('home-toolbar')">Home</button>
            <button onclick="showToolbar('insert-toolbar')">Insert</button>
            <button onclick="showToolbar('design-toolbar')">Design</button>
        </div>

        <div id="home-toolbar" class="toolbar" style="display: none;">
            <div class="dropdown">
                <button>Text Size</button>
                <div class="dropdown-content">
                    <a href="#" onclick="formatText('fontSize', '2')">2</a>
                    <a href="#" onclick="formatText('fontSize', '4')">4</a>
                    <a href="#" onclick="formatText('fontSize', '6')">6</a>
                    <a href="#" onclick="formatText('fontSize', '8')">8</a>
                </div>
            </div>
            <div class="dropdown">
                <button>Font Style</button>
                <div class="dropdown-content" style="overflow-y: auto; max-height: 200px;">
                    <a href="#" onclick="formatText('fontName', 'Agency FB')">Agency FB</a>
                    <a href="#" onclick="formatText('fontName', 'Algerian')">Algerian</a>
                    <a href="#" onclick="formatText('fontName', 'Aptos')">Aptos</a>
                    <a href="#" onclick="formatText('fontName', 'Arial')">Arial</a>
                    <a href="#" onclick="formatText('fontName', 'Arial Black')">Arial Black</a>
                    <a href="#" onclick="formatText('fontName', 'Aptos Display')">Aptos Display</a>
                    <a href="#" onclick="formatText('fontName', 'Aptos Narrow')">Aptos Narrow</a>
                    <a href="#" onclick="formatText('fontName', 'Arial Narrow')">Arial Narrow</a>
                    <a href="#" onclick="formatText('fontName', 'Arial Rounded MT Bold')">Arial Rounded MT Bold</a>
                    <a href="#" onclick="formatText('fontName', 'Bahnschrift')">Bahnschrift</a>
                    <a href="#" onclick="formatText('fontName', 'Bahnschrift Condensed')">Bahnschrift Condensed</a>
                    <a href="#" onclick="formatText('fontName', 'Bahnschrift Light')">Bahnschrift Light</a>
                    <a href="#" onclick="formatText('fontName', 'Bahnschrift Light SemiCondensed')">Bahnschrift Light SemiCondensed</a>
                    <a href="#" onclick="formatText('fontName', 'Bahnschrift SemiBold')">Bahnschrift SemiBold</a>
                    <a href="#" onclick="formatText('fontName', 'Bahnschrift SemiBold Condensed')">Bahnschrift SemiBold Condensed</a>
                    <a href="#" onclick="formatText('fontName', 'Bahnschrift SemiBold SemiCondensed')">Bahnschrift SemiBold SemiCondensed</a>
                    <a href="#" onclick="formatText('fontName', 'Bahnschrift SemiCondensed')">Bahnschrift SemiCondensed</a>
                    <a href="#" onclick="formatText('fontName', 'Bahnschrift SemiLight')">Bahnschrift SemiLight</a>
                    <a href="#" onclick="formatText('fontName', 'Bahnschrift SemiLight Condensed')">Bahnschrift SemiLight Condensed</a>
                    <a href="#" onclick="formatText('fontName', 'Blackadder ITC')">Blackadder ITC</a>
                    <a href="#" onclick="formatText('fontName', 'Calibri')">Calibri</a>
                    <a href="#" onclick="formatText('fontName', 'Cambria')">Cambria</a>
                    <a href="#" onclick="formatText('fontName', 'Candara')">Candara</a>
                    <a href="#" onclick="formatText('fontName', 'Century Gothic')">Century Gothic</a>
                    <a href="#" onclick="formatText('fontName', 'Comic Sans MS')">Comic Sans MS</a>
                    <a href="#" onclick="formatText('fontName', 'Constantia')">Constantia</a>
                    <a href="#" onclick="formatText('fontName', 'Corbel')">Corbel</a>
                    <a href="#" onclick="formatText('fontName', 'Elephant')">Elephant</a>
                    <a href="#" onclick="formatText('fontName', 'Franklin Gothic Medium')">Franklin Gothic Medium</a>
                    <a href="#" onclick="formatText('fontName', 'Garamond')">Garamond</a>
                    <a href="#" onclick="formatText('fontName', 'Georgia')">Georgia</a>
                    <a href="#" onclick="formatText('fontName', 'Gill Sans MT')">Gill Sans MT</a>
                    <a href="#" onclick="formatText('fontName', 'Lucida Sans Unicode')">Lucida Sans Unicode</a>
                    <a href="#" onclick="formatText('fontName', 'Palatino Linotype')">Palatino Linotype</a>
                    <a href="#" onclick="formatText('fontName', 'Segoe UI')">Segoe UI</a>
                    <a href="#" onclick="formatText('fontName', 'Tahoma')">Tahoma</a>
                    <a href="#" onclick="formatText('fontName', 'Times New Roman')">Times New Roman</a>
                    <a href="#" onclick="formatText('fontName', 'Trebuchet MS')">Trebuchet MS</a>
                    <a href="#" onclick="formatText('fontName', 'Verdana')">Verdana</a>
                </div>
            </div>
            <button onclick="formatText('bold')"><b>B</b></button>
            <button onclick="formatText('italic')"><i>I</i></button>
            <button onclick="formatText('underline')"><u>U</u></button>
        </div>

        <div id="insert-toolbar" class="toolbar">
            <button id="insert-table-button">Table</button>
            <button id="write-button">Write</button>
            <button id="undo-button">Undo</button>
            <button id="redo-button">Redo</button>
            <button id="insert-upload-button">+</button>
        </div>
        
        <div id="insert-menu" class="toolbar">
      <button id="insert-table-button">Table</button>
      <div id="table-picker"></div>
      <div id="write-menu" class="dropdown">

        <button>Write</button>
        <div id="pen-dropdown-content" class="dropdown-content">
          <a href="#" onclick="enableDrawing('black', 2)">Black Pen</a>
          <a href="#" onclick="enableDrawing('red', 2)">Red Pen</a>
          <a href="#" onclick="enableDrawing('blue', 2)">Blue Pen</a>
          <a href="#" onclick="enableDrawing('green', 2)">Green Pen</a>
          <a href="#" onclick="disableDrawing()">Stop Writing</a>
        </div>
      </div>
      <button onclick="undoDrawing()">Undo</button>
      <button onclick="redoDrawing()">Redo</button>
      <button id="insert-upload-button">+</button>
    </div>

        <div id="design-toolbar" class="toolbar">
            <button>Design Placeholder</button>
        </div>

        <div class="text-editor" id="assignment-text" contenteditable="true">
            <p>Write your assignment here...</p>
            <svg id="drawing-overlay"></svg>
        </div>

        <?php if (!$isDeadlinePassed): ?>
            <button id="next-button">Next</button>
        <?php else: ?>
            <p class="error-message">Sorry, the deadline for this assignment has passed.</p>
        <?php endif; ?>
    </div>

    <div id="table-modal" class="modal">
        <div class="modal-content">
            <div class="modal-header">
                <h2>Insert Table</h2>
                <span class="close-button">&times;</span>
            </div>
            <div class="modal-body">
                <label for="rows">Rows:</label>
                <input type="number" id="rows" value="3" min="1">
                <label for="cols">Columns:</label>
                <input type="number" id="cols" value="3" min="1">
            </div>
            <div class="modal-footer">
                <button id="insert-table-confirm">Insert</button>
            </div>
        </div>
    </div>

    <input type="file" id="file-upload" multiple accept="image/*, application/pdf, application/msword, application/vnd.openxmlformats-officedocument.wordprocessingml.document" style="display: none;">

    <script>
     
        const assignmentText = document.getElementById('assignment-text');
        const drawingOverlay = document.getElementById('drawing-overlay');
        let nextButton = document.getElementById('next-button');
        const homeToolbar = document.getElementById('home-toolbar');
        const insertToolbar = document.getElementById('insert-toolbar');
        const designToolbar = document.getElementById('design-toolbar');
        const insertTableButton = document.getElementById('insert-table-button');
        const writeButton = document.getElementById('write-button');
        const undoButton = document.getElementById('undo-button');
        const redoButton = document.getElementById('redo-button');
        const tableModal = document.getElementById('table-modal');
        const closeModalButton = document.querySelector('.close-button');
        const insertTableConfirmButton = document.getElementById('insert-table-confirm');
        const rowsInput = document.getElementById('rows');
        const colsInput = document.getElementById('cols');
        const insertUploadButton = document.getElementById('insert-upload-button');
        const fileUpload = document.getElementById('file-upload');
        let isDrawing = false;
        let currentColor = 'black';
        let currentLineWidth = 2;
        let currentPath = [];
        const drawnPaths = [];
        let undoHistory = [];
        let redoHistory = [];
        let isMouseOverDrawingArea = false;

        function showToolbar(toolbarId) {
            homeToolbar.style.display = 'none';
            insertToolbar.style.display = 'none';
            designToolbar.style.display = 'none';

            const toolbarToShow = document.getElementById(toolbarId);
            if (toolbarToShow) {
                toolbarToShow.style.display = 'flex';
            }
        }
        //#############3
        function showInsertMenu() {
      if (homeMenu) homeMenu.style.display = "none";
      if (insertMenu) insertMenu.style.display = "flex";
      if (designMenu) designMenu.style.display = "none";
      if (backgroundColorDropdown) backgroundColorDropdown.style.display = "none";
      if (textColorDropdown) textColorDropdown.style.display = "none";
      const tablePicker = document.getElementById('table-picker');
      if (tablePicker && tablePicker.style.display === 'block') {
        tablePicker.style.display = 'none';
      }
    }
//######################
        function formatText(command, value = null) {
            assignmentText.focus();
            document.execCommand(command, false, value);
        }

        assignmentText.addEventListener('input', function() {
            localStorage.setItem('assignmentText', assignmentText.innerHTML);
        });

        const savedText = localStorage.getItem('assignmentText');
        if (savedText) {
            assignmentText.innerHTML = savedText;
        }

        let assignmentId = 0;
        if (localStorage.getItem('assignmentId')) {
            assignmentId = localStorage.getItem('assignmentId');
        } else {
            const urlParams = new URLSearchParams(window.location.search);
            assignmentId = urlParams.get('assignment_id');
            localStorage.setItem('assignmentId', assignmentId);
        }

        const deadlinePassed = <?php echo json_encode($isDeadlinePassed); ?>;

        window.onload = function() {
            nextButton = document.getElementById('next-button');

            if (nextButton) {
                if (!deadlinePassed) {
                    nextButton.addEventListener('click', function() {
                        const assignmentContent = assignmentText.innerHTML;
                        localStorage.setItem('assignmentContent', assignmentContent);
                        window.location.href = 'select_teacher.php?assignment_id=' + assignmentId;
                    });
                } else {
                    nextButton.style.display = 'none';
                }
            }

            // Initially show the Home toolbar AFTER the DOM is fully loaded
            showToolbar('home-toolbar');
        };

        // Table insertion functionality
        insertTableButton.addEventListener('click', () => {
            tableModal.style.display = 'block';
        });

        closeModalButton.addEventListener('click', () => {
            tableModal.style.display = 'none';
        });

        insertTableConfirmButton.addEventListener('click', () => {
            const rows = parseInt(rowsInput.value);
            const cols = parseInt(colsInput.value);

            if (rows > 0 && cols > 0) {
                insertTable(rows, cols);
                tableModal.style.display = 'none';
                rowsInput.value = 3;
                colsInput.value = 3;
            } else {
                alert("Please enter valid row and column numbers.");
            }
        });

        function insertTable(rows, cols) {
            console.log("insertTable", rows, cols);

            try {
                let table = document.createElement('table');
                table.style.width = "100%";
                table.style.borderCollapse = "collapse";
                table.style.border = "1px solid black";
                table.style.tableLayout = "fixed";
                table.classList.add('custom-table');
                table.style.position = 'relative'; // Make table position relative for absolute positioning of delete button

                for (let i = 0; i < rows; i++) {
                    let row = table.insertRow();
                    for (let j = 0; j < cols; j++) {
                        let cell = row.insertCell();
                        cell.style.border = "1px solid black";
                        cell.textContent = "";
                        cell.style.padding = "8px";
                        cell.style.wordBreak = "break-word";
                        cell.style.width = `${100 / cols}%`;
                    }
                }
                console.log("Table element:", table);
                assignmentText.appendChild(table);

                const deleteButton = document.createElement('button');
                deleteButton.className = 'delete-table-button';
                deleteButton.innerHTML = '&times;';
                deleteButton.style.position = 'absolute';
                deleteButton.style.top = '-10px'; /* Adjust as needed */
                deleteButton.style.right = '-10px'; /* Adjust as needed */
                deleteButton.addEventListener('click', function() {
                    table.parentNode.removeChild(table);
                });
                table.appendChild(deleteButton); // Append delete button to the table itself

                if (assignmentText.querySelector('table')) {
                    console.log("Table inserted successfully.");
                } else {
                    console.error("Table insertion failed: Table element not found.");
                }
                disableDrawing();
            } catch (error) {
                console.error("Error inserting table:", error);
            }
        }
        function enableDrawing(color, lineWidth) {
      isDrawing = false;
      currentColor = color;
      currentLineWidth = lineWidth;
      assignmentText.style.userSelect = 'none';
      assignmentText.style.cursor = 'crosshair';
      currentPath = [];
      drawingOverlay.innerHTML = '';
      redrawDrawnPaths();

      assignmentText.addEventListener('mousedown', startDrawing);
      assignmentText.addEventListener('mousemove', draw);
      assignmentText.addEventListener('mouseup', stopDrawing);
      assignmentText.addEventListener('mouseout', stopDrawing);

      assignmentText.addEventListener('mouseenter', () => isMouseOverDrawingArea = true);
      assignmentText.addEventListener('mouseleave', () => isMouseOverDrawingArea = false);
    }

    function disableDrawing() {
      isDrawing = false;
      assignmentText.style.userSelect = 'text';
      assignmentText.style.cursor = 'text';
      assignmentText.removeEventListener('mousedown', startDrawing);
      assignmentText.removeEventListener('mousemove', draw);
      assignmentText.removeEventListener('mouseup', stopDrawing);
      assignmentText.removeEventListener('mouseout', stopDrawing);
      assignmentText.removeEventListener('mouseenter', () => isMouseOverDrawingArea = true);
      assignmentText.removeEventListener('mouseleave', () => isMouseOverDrawingArea = false);
      drawingOverlay.innerHTML = '';
      redrawDrawnPaths();
    }

    function startDrawing(e) {
      if (!isDrawing && isMouseOverDrawingArea) {
        isDrawing = true;
        const rect = assignmentText.getBoundingClientRect();
        currentPath.push({ x: e.clientX - rect.left + assignmentText.scrollLeft, y: e.clientY - rect.top + assignmentText.scrollTop });
      }
    }

    function draw(e) {
      if (isDrawing) {
        const rect = assignmentText.getBoundingClientRect();
        const x = e.clientX - rect.left + assignmentText.scrollLeft;
        const y = e.clientY - rect.top + assignmentText.scrollTop;
        currentPath.push({ x, y });
        updateSvgOverlay();
      }
    }

    function stopDrawing() {
      if (isDrawing) {
        isDrawing = false;
        if (currentPath.length > 1) {
          drawnPaths.push({ path: [...currentPath], color: currentColor, width: currentLineWidth });
          undoHistory.push({ action: 'draw', path: [...currentPath], color: currentColor, width: currentLineWidth });
          redoHistory = [];
          appendSvgPath(currentPath, currentColor, currentLineWidth);
          currentPath = [];
        } else {
          currentPath = [];
        }
      }
    }

    function appendSvgPath(path, strokeColor, strokeWidth) {
      if (path.length < 2) return;

      const svgPath = document.createElementNS('http://www.w3.org/2000/svg', 'path');
      let pathData = `M${path[0].x},${path[0].y}`;
      for (let i = 1; i < path.length; i++) {
        pathData += ` L${path[i].x},${path[i].y}`;
      }
      svgPath.setAttribute('d', pathData);
      svgPath.setAttribute('fill', 'none');
      svgPath.setAttribute('stroke', strokeColor);
      svgPath.setAttribute('stroke-width', strokeWidth);
      svgPath.setAttribute('stroke-linecap', 'round');
      svgPath.setAttribute('stroke-linejoin', 'round');
      drawingOverlay.appendChild(svgPath);
    }

    function updateSvgOverlay() {
      drawingOverlay.innerHTML = '';
      drawnPaths.forEach(pathData => {
        appendSvgPath(pathData.path, pathData.color, pathData.width);
      });
      if (currentPath.length < 2) return;
      const svgPath = document.createElementNS('http://www.w3.org/2000/svg', 'path');
      let pathData = `M${currentPath[0].x},${currentPath[0].y}`;
      for (let i = 1; i < currentPath.length; i++) {
        pathData += ` L${currentPath[i].x},${currentPath[i].y}`;
      }
      svgPath.setAttribute('d', pathData);
      svgPath.setAttribute('fill', 'none');
      svgPath.setAttribute('stroke', currentColor);
      svgPath.setAttribute('stroke-width', currentLineWidth);
      svgPath.setAttribute('stroke-linecap', 'round');
      svgPath.setAttribute('stroke-linejoin', 'round');
      drawingOverlay.appendChild(svgPath);
    }

    function undoDrawing() {
      if (undoHistory.length > 0) {
        const lastAction = undoHistory.pop();
        redoHistory.unshift(lastAction);
        drawnPaths.pop();
        redrawDrawnPaths();
      }
    }

    function redoDrawing() {
      if (redoHistory.length > 0) {
        const nextAction = redoHistory.shift();
        undoHistory.push(nextAction);
        drawnPaths.push({ path: nextAction.path, color: nextAction.color, width: nextAction.width });
        redrawDrawnPaths();
      }
    }

    function redrawDrawnPaths() {
      drawingOverlay.innerHTML = '';
      drawnPaths.forEach(pathData => {
        appendSvgPath(pathData.path, pathData.color, pathData.width);
      });
    }

    function toggleBackgroundDropdown() {
      if (backgroundColorDropdown) {
        backgroundColorDropdown.style.display = backgroundColorDropdown.style.display === 'grid' ? 'none' : 'grid';
      }
      if (textColorDropdown && textColorDropdown.style.display === 'grid') {
        textColorDropdown.style.display = 'none';
      }
    }

    function toggleColorDropdown() {
      if (textColorDropdown) {
        textColorDropdown.style.display = textColorDropdown.style.display === 'grid' ? 'none' : 'grid';
      }
      if (backgroundColorDropdown && backgroundColorDropdown.style.display === 'grid') {
        backgroundColorDropdown.style.display = 'none';
      }
    }

        // File upload functionality
        insertUploadButton.addEventListener('click', () => {
            fileUpload.click();
        });

        fileUpload.addEventListener('change', (event) => {
            const files = event.target.files;
            if (files && files.length > 0) {
                insertFilesIntoEditor(files);
            }
            fileUpload.value = '';
        });

        function insertFilesIntoEditor(files) {
            for (const file of files) {
                const fileType = file.type;
                const fileName = file.name;
                const fileExtension = fileName.split('.').pop().toLowerCase();

                if (fileType.startsWith('image/')) {
                    const reader = new FileReader();
                    reader.onload = (e) => {
                        const img = document.createElement('img');
                        img.src = e.target.result;
                        img.style.maxWidth = '100%';
                        assignmentText.appendChild(img);
                        localStorage.setItem('assignmentText', assignmentText.innerHTML);
                    };
                    reader.readAsDataURL(file);
                } else if (fileType === 'application/pdf') {
                    const pdfLink = document.createElement('a');
                    pdfLink.href = '#';
                    pdfLink.textContent = `Download PDF: ${fileName}`;
                    pdfLink.addEventListener('click', (e) => {
                        e.preventDefault();
                        alert(`The file "${fileName}" will be downloaded.`);
                    });
                    assignmentText.appendChild(pdfLink);
                    assignmentText.appendChild(document.createElement('br'));
                    localStorage.setItem('assignmentText', assignmentText.innerHTML);
                } else if (fileExtension === 'doc' || fileExtension === 'docx') {
                    const docLink = document.createElement('a');
                    docLink.href = '#';
                    docLink.textContent = `Download Document: ${fileName}`;
                    docLink.addEventListener('click', (e) => {
                        e.preventDefault();
                        alert(`The file "${fileName}" will be downloaded.`);
                    });
                    assignmentText.appendChild(docLink);
                    assignmentText.appendChild(document.createElement('br'));
                    localStorage.setItem('assignmentText', assignmentText.innerHTML);
                } else {
                    const otherFileLink = document.createElement('a');
                    otherFileLink.href = '#';
                    otherFileLink.textContent = `Download File: ${fileName}`;
                    otherFileLink.addEventListener('click', (e) => {
                        e.preventDefault();
                        alert(`The file "${fileName}" will be downloaded.`);
                    });
                    assignmentText.appendChild(otherFileLink);
                    assignmentText.appendChild(document.createElement('br'));
                    localStorage.setItem('assignmentText', assignmentText.innerHTML);
                }
            }
        }
    
    </script>
</body>
</html>
